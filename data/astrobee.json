{"technical_approach": "The Astrobee element conducted incremental design and development of a free flyer that meets project, stakeholder, and ISS interface and safety requirements. Stakeholders include the ISS SPHERES Facility, the SPHERES Working Group, HEOMD AES program, ISS program, Flight Operations Directorate (FOD), Payload Operations & Integration Center (POIC) and others. The project and stakeholders have provided general and scenario specific functional requirements. Astrobee will function as a micro-gravity research facility that will eventually succeed the existing SPHERES facility. In contrast to SPHERES, which was designed to simulate satellites (e.g., in terms of propulsion method), the Astrobee is designed as a robot. In particular, the Astrobee is based on mobile robot engineering principles (autonomy, perception, navigation, middleware, etc.), supports telerobotic operations (crew and ground control), and is capable of autonomous docking and resupply (similar to how robotic vacuum cleaners can autonomously recharge themselves). Consequently, Astrobee is not a “drop-in” replacement for SPHERES and is not able to do everything that the current SPHERES can do. However, Astrobee is able to do many more things than the current SPHERES are capable of performing. The ISS Program levies interface requirements on Astrobee for both launch and on-orbit. The ISS Payload Safety Review Panel (PSRP) approves ISS safety certifications. Complying with certain safety standards mitigates many of the standard ISS safety standards, while others are met by design. Astrobee was developed incrementally over a series of prototypes. Earlier prototypes addressed trade studies and areas of risk. The later prototypes implemented system requirements and incrementally matured the system design. The Astrobee system was tested incrementally, as each prototype was developed and delivered. Each prototype had stated objectives, both as overall system, and for subsystem development. The Astrobee testing validated system requirements and capabilities, and bought down risk. The prototypes were not treated as flight hardware. Prototyping allowed the team to make design changes at a rapid pace, without the overhead of flight hardware processes. The Astrobee Element accepted the risk of damage to prototype hardware in order to take advantage of the less burdensome processes. Prototype 1 was developed for risk reduction purposes and focused on open-loop operations and basic linear/rotational acceleration with two variable pitch propellers (VPP). Prototype 2 was a flat-sat structure, focused on closed loop control, and provided a platform for further subsystem testing and risk reduction. This prototype included four VPP fans, and tested closed loop navigation using augmented reality (AR) target tracking and docking approaches. Prototype 3 built upon the Prototype 2 structure. Though by this point, the flight propulsion design had progressed to an impeller-based design, the VPP fans were used for propulsion. Prototype 3 focused on avionics (C&DH, EPS and GNC) , and FSW Vision Based Navigation (VBN) without fiducials. This prototype implemented mostly flight-like avionics components. Prototype 4 was a flight-like unit in form, fit and function. However, this prototype was not assembled and integrated to a standard for flight qualification. This unit was used to address all remaining risks associated with certification or flight unit development. The testing was focus on validation of the remaining Astrobee capabilities. The Certification Units were developed from the final Prototype 4 design, with modifications as a result of Prototype 4 testing. These units were used not only for performance testing, but also for ISS interface requirement verification and certification. Finally, two Flight Units were developed. Two additional Flight Units were also built for AES (1 additional on-orbit unit, and a flight spare). These units were developed and assembled following ARC procedures and processes for flight hardware. They were then shipped to JSC for launch processing."}
